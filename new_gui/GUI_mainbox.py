# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'gui_design.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
import io
import matplotlib.pyplot as plt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QLabel, QVBoxLayout, QWidget

from .Cat_Dlog import UiDialog
from .Rev_Dlog import UiDialogRev
from .Exp_Dlog import UiDialogExp
from .Trans_Dlog import UiDialogTrans
from new_gui.expense_report import Category


class UiMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.category_ER_list = []

    def setup_ui(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 40, 111, 31))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")

        self.category_push = QtWidgets.QPushButton(self.groupBox)
        self.category_push.setGeometry(QtCore.QRect(0, 0, 113, 32))
        self.category_push.setObjectName("category_push")

        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(180, 40, 111, 31))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")

        self.revenue_push = QtWidgets.QPushButton(self.groupBox_2)
        self.revenue_push.setGeometry(QtCore.QRect(0, 0, 113, 32))
        self.revenue_push.setObjectName("revenue_push")

        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(370, 40, 111, 31))
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")

        self.Expense_push = QtWidgets.QPushButton(self.groupBox_3)
        self.Expense_push.setGeometry(QtCore.QRect(0, 0, 113, 32))
        self.Expense_push.setObjectName("Expense_push")

        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(580, 40, 121, 31))
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")

        self.transfer_push = QtWidgets.QPushButton(self.groupBox_4)
        self.transfer_push.setGeometry(QtCore.QRect(0, 0, 121, 32))
        self.transfer_push.setObjectName("transfer_push")

        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(20, 110, 341, 311))
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")

        self.comboBox = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox.setGeometry(QtCore.QRect(20, 10, 301, 41))
        self.comboBox.setObjectName("comboBox")

        self.label = QtWidgets.QLabel(self.groupBox_5)
        self.label.setGeometry(QtCore.QRect(40, 270, 60, 16))
        self.label.setObjectName("label")

        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEdit.setGeometry(QtCore.QRect(180, 260, 111, 31))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("textbrowser")

        self.scrollArea = QtWidgets.QScrollArea(self.groupBox_5)
        self.scrollArea.setGeometry(QtCore.QRect(10, 40, 311, 211))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 309, 209))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

        self.tableWidget = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.tableWidget.setGeometry(QtCore.QRect(20, 10, 256, 192))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.tableWidget.setHorizontalHeaderItem(1, item)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 480, 751, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        # self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton.setGeometry(QtCore.QRect(650, 500, 113, 32))
        # self.pushButton.setObjectName("pushButton")
        # self.pushButton.clicked.connect(self.close)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuWindow = QtWidgets.QMenu(self.menubar)
        self.menuWindow.setObjectName("menuWindow")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.tableWidget.setColumnWidth(0, 175)
        self.tableWidget.setColumnWidth(1, 75)

        self.retranslate_ui(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # connecting the push buttons to the Dialog window
        self.category_push.clicked.connect(self.cat_clicked)
        self.Expense_push.clicked.connect(self.exp_clicked)
        self.revenue_push.clicked.connect(self.rev_clicked)
        self.transfer_push.clicked.connect(self.trans_clicked)

        # refreshing table when new item in combo box is selected
        self.comboBox.currentIndexChanged.connect(self.table_freshener)

    def exit_button_clicked(self):
        print("Exit button clicked")
        self.close

    def cat_clicked(self):
        dialog = QtWidgets.QDialog()
        ui = UiDialog()
        ui.setup_ui(dialog)
        ui.category_added.connect(self.add_category)  # when ok is pressed text is sent to combo box
        dialog.show()
        dialog.exec_()

    def add_category(self, text):
        # makes Expense report category object list
        new_category = Category(text, name=text)
        self.category_ER_list.append(new_category)
        self.comboBox.addItem(new_category.name, new_category)

    def rev_clicked(self):
        Dialog = QtWidgets.QDialog()
        ui = UiDialogRev()
        ui.setup_ui(Dialog)
        ui.combo_update(self.category_ER_list)
        Dialog.show()
        Dialog.exec_()
        self.table_freshener()
        self.clear_pie_chart()
        self.piece_of_my_pie()

    def exp_clicked(self):
        Dialog = QtWidgets.QDialog()
        ui = UiDialogExp()
        ui.setup_ui(Dialog)
        ui.combo_set(self.category_ER_list)
        Dialog.show()
        Dialog.exec_()
        self.table_freshener()
        self.clear_pie_chart()
        self.piece_of_my_pie()

    def trans_clicked(self):
        Dialog = QtWidgets.QDialog()
        ui = UiDialogTrans()
        ui.setup_ui(Dialog)
        ui.set_categories(self.category_ER_list)
        Dialog.show()
        Dialog.exec_()
        self.table_freshener()
        self.clear_pie_chart()
        self.piece_of_my_pie()

    def table_freshener(self):
        # clearing
        self.tableWidget.clearContents()
        self.lineEdit.clear()

        selected_drop = self.comboBox.currentData()
        selected_cat = selected_drop if selected_drop is not None else None
        wallet_d = selected_cat.wallet
        tot = selected_cat.get_balance()

        row = 0
        for item in wallet_d:
            decr = item['description']
            new_decr = QtWidgets.QTableWidgetItem(decr)
            prc = str(item['amount'])
            new_prc = QtWidgets.QTableWidgetItem(prc)
            row_pos = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row_pos)
            self.tableWidget.setItem(row, 0, new_decr)
            self.tableWidget.setItem(row, 1, new_prc)
            row += 1

        self.lineEdit.setText(str(tot))

    def piece_of_my_pie(self):

        # Create a widget to hold the chart
        chart_widget = QWidget(self.centralwidget)
        chart_widget.setObjectName("chart_widget")
        chart_widget.setMinimumSize(QtCore.QSize(200, 200))
        chart_widget.setMaximumSize(QtCore.QSize(380, 380))  # set a maximum size
        chart_widget.setSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        chart_widget.setStyleSheet('background-color: white;')
        chart_layout = QVBoxLayout(chart_widget)

        # Create a label to hold the chart image
        self.label = QLabel(chart_widget)
        self.label.setScaledContents(True)
        chart_layout.addWidget(self.label, alignment=QtCore.Qt.AlignCenter)

        # Generate the pie chart
        vals = [category.get_balance() for category in self.category_ER_list]
        stickers = [category.category for category in self.category_ER_list]
        fig, ax = plt.subplots()
        ax.pie(vals, labels=stickers, autopct='%1.1f%%')
        ax.axis('equal')

        # Convert the figure to a QPixmap
        buff = io.BytesIO()
        plt.title("Spending Percentage")
        fig.savefig(buff, dpi=96, format='png', bbox_inches='tight')
        buff.seek(0)
        pixmap = QPixmap()
        pixmap.loadFromData(buff.getvalue())

        self.label.clear()

        # Set the QPixmap as the image for the QLabel widget
        self.label.setPixmap(pixmap)

        # Check if there is a layout already set for self.centralwidget
        if self.centralwidget.layout() is not None:
            # Add the chart widget to the existing layout
            self.centralwidget.layout().addWidget(chart_widget, alignment=QtCore.Qt.AlignRight)
        else:
            # Create a new layout for the chart widget
            layout = QVBoxLayout(self.centralwidget)
            layout.addWidget(chart_widget, alignment=QtCore.Qt.AlignRight)
            self.centralwidget.setLayout(layout)

    def clear_pie_chart(self):
        # Remove any existing layout
        old_layout = self.centralwidget.layout()
        if old_layout:
            while old_layout.count():
                old_layout.takeAt(0)

        # Remove the chart widget entirely
        chart_widget = self.centralwidget.findChild(QWidget, "chart_widget")
        if chart_widget:
            chart_widget.setParent(None)
            chart_widget.deleteLater()

    def retranslate_ui(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.category_push.setText(_translate("MainWindow", "Add Category"))
        self.revenue_push.setText(_translate("MainWindow", "Add Revenue"))
        self.Expense_push.setText(_translate("MainWindow", "Add Expense"))
        self.transfer_push.setText(_translate("MainWindow", "Transfer Money"))
        self.label.setText(_translate("MainWindow", "Total"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Item"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Price"))
